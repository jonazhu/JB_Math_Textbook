Traceback (most recent call last):
  File "//anaconda3/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "//anaconda3/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "//anaconda3/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "//anaconda3/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "//anaconda3/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "//anaconda3/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "//anaconda3/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "//anaconda3/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.path import Path
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
%matplotlib notebook
%matplotlib inline
from matplotlib.markers import MarkerStyle
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
from matplotlib.transforms import Affine2D
import matplotlib.patches as patches
from matplotlib.patches import Rectangle

frames=9
for n in range(frames):

#green background
    verts = [(-20, -20),  # left, bottom
         (-20, 100),  # left, top
         (100, 100),  # right, top
         (100, -20),  # right, bottom
         (0., 0.),  # ignored
        ]
    codes = [Path.MOVETO,Path.LINETO,Path.LINETO,Path.LINETO,Path.CLOSEPOLY,]

    path = Path(verts, codes)
    patch = patches.PathPatch(path, facecolor='green', lw=.1, edgecolor='w')
    fig, ax = plt.subplots()
    ax.add_patch(patch)
    ax.set_xlim(-2, 10)
    ax.set_ylim(-2, 10)
    
#endzone
    plt.gca().add_patch(Rectangle((7.88,-20),50,20.04, edgecolor='w', facecolor=(.0,.1,.4), lw=4))

#side line
    plt.gca().add_patch(Rectangle((6.8,-20),70,200, edgecolor='w', facecolor='none', lw=70))

#Yard Marks
    yards= [0,1,2,3,4,5,6,7,8,9,10]
    for i in range(len(yards)):
        plt.gca().add_patch(Rectangle((8.1,i),.5,.1, edgecolor='w', facecolor='w', lw=1))
#5 & 10
    plt.gca().add_patch(Rectangle((8.1,5),50,.1, edgecolor='w', facecolor='w', lw=1))
    plt.gca().add_patch(Rectangle((8.1,10),50,.1, edgecolor='w', facecolor='w', lw=1))

#Adjacent line to camera
    plt.gca().add_patch(Rectangle((0.3,-0.1),7.68,.1, edgecolor='none', facecolor='yellow', lw=1))

#Tracking line
    x = np.linspace(0, 8, 100)
    f = lambda x : ((8-n)/8)*x
    y=f(x)
    plt.plot(x,((8-n)/8)*x,'--y')

#Bob Hayes
    import matplotlib as mpl
    from svgpath2mpl import parse_path
    from svgpathtools import svg2paths
    player_path, attributes = svg2paths('bullet_bob.svg')
    player_marker = parse_path(attributes[0]['d'])
    player_marker.vertices -= player_marker.vertices.mean(axis=0)
    x=7.8
    y=8.8-(n)
    plt.plot(x,y, marker=player_marker, markersize=35,color= 'b')
    
#Camera
    camera_path, attributes = svg2paths('camera.svg')
    camera_marker = parse_path(attributes[0]['d'])
    camera_marker.vertices -= camera_marker.vertices.mean(axis=0)
    camera_marker = camera_marker.transformed(mpl.transforms.Affine2D().rotate_deg(45-(5*n)))
    camera_marker = camera_marker.transformed(mpl.transforms.Affine2D().scale(.1,.1))
    x = -0.01
    y = 0.15
    plt.plot(x,y,marker=camera_marker,markersize=30,color = 'k')

#Annotations
    ax.annotate('Camera',
                xy=(0, 1), xycoords='data',
                xytext=(0, -35), textcoords='offset points', color='white')
#Legend
    plt.xlabel('Distance from camera (yds)')
    plt.ylabel('Distance from endzone (yds)')
    plt.title('"Bullet" Bob Hayes Returning a Kick')

#Save each frame as a .png
    plt.savefig(str(n)+'.png')
    plt.close()

#Save as a GIF
from PIL import Image
images = []
for n in range(frames):
    exec('a'+str(n)+'=Image.open("'+str(n)+'.png")')
    images.append(eval('a'+str(n)))
images[0].save('Football_Animation.gif',
               save_all=True,
               append_images=images[1:],
               duration=400,
               loop=0)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 60[0m
[1;32m     58[0m [38;5;66;03m#Bob Hayes[39;00m
[1;32m     59[0m     [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m [38;5;28;01mas[39;00m [38;5;21;01mmpl[39;00m
[0;32m---> 60[0m     [38;5;28;01mfrom[39;00m [38;5;21;01msvgpath2mpl[39;00m [38;5;28;01mimport[39;00m parse_path
[1;32m     61[0m     [38;5;28;01mfrom[39;00m [38;5;21;01msvgpathtools[39;00m [38;5;28;01mimport[39;00m svg2paths
[1;32m     62[0m     player_path, attributes [38;5;241m=[39m svg2paths([38;5;124m'[39m[38;5;124mbullet_bob.svg[39m[38;5;124m'[39m)

[0;31mModuleNotFoundError[0m: No module named 'svgpath2mpl'
ModuleNotFoundError: No module named 'svgpath2mpl'

